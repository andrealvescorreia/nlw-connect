import { apiUrl } from "../../env";

/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * NLW Connect
 * Sistema de inscrição para o evento
 * OpenAPI spec version: 0.0.1
 */
export type PostSubscriptionsBody = {
  name: string;
  email: string;
  /** @nullable */
  referrerId?: string | null;
};

export type PostSubscriptions201 = {
  subscriberId: string;
};

export type GetInvitesSubscriberId200 = {
  subscriberId: string;
};

export type GetSubscribersSubscriberIdRankingClicks200 = {
  count: number;
};

export type GetSubscribersSubscriberIdRankingCount200 = {
  count: number;
};

export type GetSubscribersSubscriberIdRankingPosition200 = {
  /** @nullable */
  position: number | null;
};

export type GetRanking200RankingItem = {
  id: string;
  name: string;
  score: number;
};

export type GetRanking200 = {
  ranking: GetRanking200RankingItem[];
};



/**
 * @summary Inscreve alguém no evento
 */
export const getPostSubscriptionsUrl = () => {
  return `${apiUrl}/subscriptions`
}

export const postSubscriptions = async (postSubscriptionsBody: PostSubscriptionsBody, options?: RequestInit): Promise<PostSubscriptions201> => {
  const res = await fetch(getPostSubscriptionsUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(
        postSubscriptionsBody,)
    }
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: PostSubscriptions201 = body ? JSON.parse(body) : {}

  return data
}



/**
 * @summary Acessa o link de convite e redireciona o usuário
 */
export const getGetInvitesSubscriberIdUrl = (subscriberId: string,) => {

  return `${apiUrl}/invites/${subscriberId}`
}

export const getInvitesSubscriberId = async (subscriberId: string, options?: RequestInit): Promise<GetInvitesSubscriberId200> => {

  const res = await fetch(getGetInvitesSubscriberIdUrl(subscriberId),
    {
      ...options,
      method: 'GET'


    }
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetInvitesSubscriberId200 = body ? JSON.parse(body) : {}

  return data
}



/**
 * @summary Retorna quantidade de cliques de indicação de um inscrito
 */
export const getGetSubscribersSubscriberIdRankingClicksUrl = (subscriberId: string,) => {

  return `${apiUrl}/subscribers/${subscriberId}/ranking/clicks`
}

export const getSubscribersSubscriberIdRankingClicks = async (subscriberId: string, options?: RequestInit): Promise<GetSubscribersSubscriberIdRankingClicks200> => {

  const res = await fetch(getGetSubscribersSubscriberIdRankingClicksUrl(subscriberId),
    {
      ...options,
      method: 'GET'


    }
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetSubscribersSubscriberIdRankingClicks200 = body ? JSON.parse(body) : {}

  return data
}



/**
 * @summary Retorna quantidade de indicações de um inscrito
 */
export const getGetSubscribersSubscriberIdRankingCountUrl = (subscriberId: string,) => {


  return `${apiUrl}/subscribers/${subscriberId}/ranking/count`
}

export const getSubscribersSubscriberIdRankingCount = async (subscriberId: string, options?: RequestInit): Promise<GetSubscribersSubscriberIdRankingCount200> => {

  const res = await fetch(getGetSubscribersSubscriberIdRankingCountUrl(subscriberId),
    {
      ...options,
      method: 'GET'


    }
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetSubscribersSubscriberIdRankingCount200 = body ? JSON.parse(body) : {}

  return data
}



/**
 * @summary Retorna a posição do usuário no ranking de indicações
 */
export const getGetSubscribersSubscriberIdRankingPositionUrl = (subscriberId: string,) => {


  return `${apiUrl}/subscribers/${subscriberId}/ranking/position`
}

export const getSubscribersSubscriberIdRankingPosition = async (subscriberId: string, options?: RequestInit): Promise<GetSubscribersSubscriberIdRankingPosition200> => {

  const res = await fetch(getGetSubscribersSubscriberIdRankingPositionUrl(subscriberId),
    {
      ...options,
      method: 'GET'


    }
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetSubscribersSubscriberIdRankingPosition200 = body ? JSON.parse(body) : {}

  return data
}



/**
 * @summary Acessa o ranking
 */
export const getGetRankingUrl = () => {


  return `${apiUrl}/ranking`
}

export const getRanking = async (options?: RequestInit): Promise<GetRanking200> => {

  const res = await fetch(getGetRankingUrl(),
    {
      ...options,
      method: 'GET'


    }
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetRanking200 = body ? JSON.parse(body) : {}

  return data
}

